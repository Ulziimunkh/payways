<?php

namespace Selmonal\Payways;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;

class Transaction extends Model
{
    /**
     * The default attributes.
     *
     * @var array
     */
    protected $attributes = [
        'response_status' => Response::STATUS_PENDING,
        'currency'        => 'MNT',
    ];

    /**
     * @var array
     */
    protected $casts = [
        'response_data' => 'json',
    ];

    /**
     * The fillable fields.
     *
     * @var array
     */
    protected $fillable = [
        'amount', 'currency', 'description', 'gateway'
    ];

    /**
     * Make a new transaction.
     *
     * @param Gateway $gateway
     * @param $attributes
     *
     * @return static
     */
    public static function make(Gateway $gateway, $attributes)
    {
        $transaction = new static($attributes);

        $transaction->setGateway($gateway);

        return $transaction;
    }

    /**
     * Boot the Transaction model.
     *
     * @return void
     */
    public static function boot()
    {
        parent::boot();

        static::saving(function (Transaction $transaction) {
            if ($transaction->isDirty('response_status')) {
                if ($transaction->attributes['response_status'] == Response::STATUS_APPROVED) {
                    $transaction->paid_at = Carbon::now();
                }
            }
        });

        static::creating(function (Transaction $transaction) {
            if (Auth::user()) {
                $transaction->user()->associate(Auth::user());
            }
        });
    }

    /**
     * Find a transaction for the given reference.
     *
     * @param $reference
     * @param $gateway
     *
     * @return Transaction
     */
    public static function findByReference($reference, $gateway)
    {
        return self::whereReference($reference)->whereGateway($gateway)->first();
    }

    /**
     * The user that is making transaction.
     * 
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function user()
    {
        return $this->belongsTo(config('payways.user.model'));
    }

    /**
     * Update the transaction status.
     *
     * @param Response $response
     */
    public function updateStatus(Response $response)
    {
        $this->attributes['response_status'] = $response->getStatus();
        $this->attributes['response_code'] = $response->getCode();
        $this->attributes['response_message'] = $response->getMessage();
        $this->attributes['response_data'] = json_encode($response->getData());

        $this->save();
    }

    /**
     * Start the process.
     *
     * @return ResponseInterface
     */
    public function process()
    {
        return $this->getGateway()->process($this);
    }

    /**
     * Complete the process if that has started.
     *
     * @return ResponseInterface
     */
    public function completeProcess()
    {
        return $this->getGateway()->completeProcess($this);
    }

    /**
     * Determine if the transaction is paid.
     *
     * @return bool
     */
    public function getIsPaidAttribute()
    {
        return !is_null($this->paid_at);
    }

    /**
     * Get the gateway instance.
     *
     * @return Gateway
     */
    public function getGateway()
    {
        return Gateway::make($this->gateway);
    }

    /**
     * Set the gateway for the model.
     *
     * @param Gateway $gateway
     */
    private function setGateway(Gateway $gateway)
    {
        $this->gateway = $gateway->getName();
    }

    /**
     * The relation with the payable models.
     *
     * @return \Illuminate\Database\Eloquent\Relations\MorphTo
     */
    public function payable()
    {
        return $this->morphTo();
    }

    /**
     * @param PayableInterface $payable
     */
    public function setPayable(PayableInterface $payable)
    {
        $this->payable()->associate($payable);

        $this->amount = $payable->getPaymentAmount();
        $this->currency = $payable->getPaymentCurrency();
        $this->description = $payable->getPaymentDescription();
    }

    /**
     * Set the reference for the transaction.
     *
     * @param $reference
     */
    public function setReference($reference)
    {
        $this->reference = $reference;
    }

    /**
     * Set the currency attribute.
     *
     * @param $value
     */
    public function setCurrencyAttribute($value)
    {
        $this->attributes['currency'] = strtoupper($value);
    }

    /**
     * Get the reference value that generated by the
     * bank.
     *
     * @return string
     */
    public function getReference()
    {
        return $this->reference;
    }

    /**
     * Get the status.
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->attributes['response_status'];
    }

    /**
     * Determine if the transaction is pending.
     *
     * @return bool
     */
    public function isPending()
    {
        return $this->getStatus() == Response::STATUS_PENDING;
    }

    /**
     * Determine if the transaction is approved.
     *
     * @return bool
     */
    public function isApproved()
    {
        return $this->getStatus() == Response::STATUS_APPROVED;
    }

    /**
     * Determine if the transaction is declined.
     *
     * @return bool
     */
    public function isDeclined()
    {
        return $this->getStatus() == Response::STATUS_DECLINED;
    }

    /**
     * Determine if the transaction is cancelled
     * by the customer.
     *
     * @return bool
     */
    public function isCancelled()
    {
        return $this->getStatus() == Response::STATUS_CANCELLED;
    }

    /**
     * Get the amount of the transaction.
     *
     * @return float
     */
    public function getAmount()
    {
        return (float) $this->amount;
    }

    /**
     * Get the currency of the transaction.
     *
     * @return Currency
     */
    public function getCurrency()
    {
        return Currency::find($this->attributes['currency']);
    }

    /**
     * @return Carbon
     */
    public function getDate()
    {
        return $this->created_at;
    }

    /**
     * @param Builder $builder
     *
     * @return Builder
     */
    public function scopeApproved(Builder $builder)
    {
        return $builder->where('response_status', Response::STATUS_APPROVED);
    }

    /**
     * @param Builder $builder
     *
     * @return Builder
     */
    public function scopeDeclined(Builder $builder)
    {
        return $builder->where('response_status', Response::STATUS_DECLINED);
    }

    /**
     * @param Builder $builder
     *
     * @return Builder
     */
    public function scopeCancelled(Builder $builder)
    {
        return $builder->where('response_status', Response::STATUS_CANCELLED);
    }

    /**
     * @param Builder $builder
     *
     * @return Builder
     */
    public function scopePending(Builder $builder)
    {
        return $builder->where('response_status', Response::STATUS_PENDING);
    }

    /**
     * @param Builder $builder
     *
     * @return Builder
     */
    public function scopeToday(Builder $builder)
    {
        return $builder->whereRaw('date(created_at) = date(now())');
    }
}
